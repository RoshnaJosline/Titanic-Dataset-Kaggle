# -*- coding: utf-8 -*-
"""Kaggle_Competition(Titanic dataset).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d01_yonJEKpLAnu08ggSMxnEZbBxvVMI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
files.upload()

df1=pd.read_csv('/content/train.csv')

df2=pd.read_csv('/content/test.csv')

df1

df2.head()

df1.shape

df2.shape

df1.info()

df1.isnull().sum()

df1.drop(['PassengerId'],axis=1,inplace=True)

df2.drop(['PassengerId'],axis=1,inplace=True)

df1.drop(['Name'],axis=1,inplace=True)

df2.drop(['Name'],axis=1,inplace=True)

df1.drop(['Ticket'],axis=1,inplace=True)

df2.drop(['Ticket'],axis=1,inplace=True)

df1.drop(['Cabin'],axis=1,inplace=True)

df2.drop(['Cabin'],axis=1,inplace=True)

df1.drop(['Embarked'],axis=1,inplace=True)

df2.drop(['Embarked'],axis=1,inplace=True)

df1.head()

df2.head()

df1.shape

df2.shape

df1.isnull().sum()

df2.isnull().sum()

df1['Age']=df1['Age'].fillna(df1['Age'].mean())

df1['Age'].isnull().sum()

df1

df2['Age']=df2['Age'].fillna(df2['Age'].mean())

df2['Fare']=df2['Fare'].fillna(df2['Fare'].mean())

df2.isnull().sum()

df1['Sex']=df1['Sex'].replace({'male':0,'female':1})

df1

df2['Sex']=df2['Sex'].replace({'male':0,'female':1})

df2

df1.info()

df2.info()

df1.isnull().sum()

df2.isnull().sum()

df1.head()

df2.head()

df1.describe()

df1.corr()

sns.heatmap(df1.corr())

! pip install sweetviz

import sweetviz as sv

analyze_report=sv.analyze(df1)
analyze_report.show_html('analyze.html')
import IPython
IPython.display.HTML('analyze.html')

sns.histplot(data=df1)

sns.boxplot(df1['Pclass'])

sns.boxplot(df1['Age'])

sns.boxplot(df1['SibSp'])

sns.boxplot(df1['Fare'])

X=df1.drop(['Survived'],axis=1)
y=df1.Survived

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=0)

X_test=df2.copy()

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()
X_train=sc.fit_transform(X_train,y_train)
X_test=sc.transform(X_test)

from sklearn.linear_model import LogisticRegression

classifier=LogisticRegression(random_state=42)
classifier.fit(X_train,y_train)

y_pred=classifier.predict(X_test)

from sklearn.metrics import accuracy_score

print('Accuracy Score:',accuracy_score(y_test,y_pred))

from sklearn.tree import DecisionTreeClassifier

clf_gini=DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=42)
clf_gini.fit(X_train,y_train)

y_pred=clf_gini.predict(X_test)

y_pred

y_pred.shape

from sklearn.metrics import accuracy_score

print('Accuracy Score:',accuracy_score(y_test,y_pred))

from sklearn.metrics import confusion_matrix

cm=confusion_matrix(y_test,y_pred)

cm

from sklearn.metrics import classification_report

print(classification_report(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier

rfc_gini=RandomForestClassifier(n_estimators=150,criterion='entropy',max_depth=3,random_state=42)
rfc_gini.fit(X_train,y_train)

y_pred=rfc_gini.predict(X_test)

from sklearn.metrics import accuracy_score

print('Accuracy Score:',accuracy_score(y_test,y_pred))

